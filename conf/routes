# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Enable webjar based resources to be returned
GET           /webjars/*file                                      controllers.WebJarAssets.at(file)

# Home page
GET           /                                                   controllers.Application.index
GET           /login                                              controllers.Application.login
GET           /ping                                               controllers.Application.ping
POST          /logout                                             controllers.Application.logout

# CAS callback And logout
GET           /callback                                           org.pac4j.play.CallbackController.callback
GET           /logout                                             org.pac4j.play.CallbackController.logoutAndRedirect

# User
GET           /user                                               controllers.conf.UserController.index(jobNo: Option[String], page: Int ?=0, pageSize: Int ?=10)
GET           /user/total                                         controllers.conf.UserController.count(jobNo: Option[String])
GET           /user/:jobNo                                        controllers.conf.UserController.show(jobNo: String)
GET           /user/:jobNo/permissions                            controllers.conf.UserController.permissions(jobNo: String)
DELETE        /user/:jobNo                                        controllers.conf.UserController.delete(jobNo: String)
POST          /user                                               controllers.conf.UserController.save
PUT           /user/:jobNo                                        controllers.conf.UserController.update(jobNo: String)

# Area
GET           /area                                               controllers.conf.AreaController.all
GET           /area/list                                          controllers.conf.AreaController.list(envId: Int ?=0)
GET           /area/:id                                           controllers.conf.AreaController.get(id: Int)
GET           /area/:id/refresh                                   controllers.conf.AreaController.refresh(id: Int)
POST          /area                                               controllers.conf.AreaController.save
PUT           /area                                               controllers.conf.AreaController.update
DELETE        /area/:id                                           controllers.conf.AreaController.delete(id: Int)

# Environment
GET           /env                                                controllers.conf.EnvController.index(page: Int ?=0, pageSize: Int ?=10)
GET           /env/total                                          controllers.conf.EnvController.count
GET           /env/all                                            controllers.conf.EnvController.all
GET           /env/allScriptVersion                               controllers.conf.EnvController.allScriptVersion
GET           /env/:id                                            controllers.conf.EnvController.show(id: Int)
DELETE        /env/:id                                            controllers.conf.EnvController.delete(id: Int)
POST          /env                                                controllers.conf.EnvController.save
PUT           /env/:id                                            controllers.conf.EnvController.update(id: Int)
POST          /env/auth                                           controllers.conf.EnvController.showAuth
# Environment member
GET           /env/:envId/members                                 controllers.conf.EnvController.members(envId: Int)
GET           /env/:envId/member/:jobNo                           controllers.conf.EnvController.member(envId: Int, jobNo: String)
POST          /env/:envId/member                                  controllers.conf.EnvController.saveMember(envId: Int, jobNo: String)
DELETE        /env/member/:memberId                               controllers.conf.EnvController.deleteMember(envId: Int, memberId: Int)

# Project
GET           /project                                            controllers.conf.ProjectController.index(projectName: Option[String], my: Boolean ?=false, page: Int?=0, pageSize: Int ?=30)
GET           /project/total                                      controllers.conf.ProjectController.count(projectName: Option[String], my: Boolean ?=false)
GET           /project/all                                        controllers.conf.ProjectController.all
GET           /project/allExceptSelf/:id                          controllers.conf.ProjectController.allExceptSelf(id: Int)
GET           /project/atts                                       controllers.conf.ProjectController.atts(projectId: Int)
GET           /project/vars                                       controllers.conf.ProjectController.vars(projectId: Int, envId: Int)
GET           /project/:id                                        controllers.conf.ProjectController.show(id: Int)
DELETE        /project/:id                                        controllers.conf.ProjectController.delete(id: Int)
POST          /project                                            controllers.conf.ProjectController.save
PUT           /project/:projectId                                 controllers.conf.ProjectController.update(projectId: Int, envId: Int)
POST          /project/auth                                       controllers.conf.ProjectController.showAuth(envId: Int)
POST          /project/addCluster                                 controllers.conf.ProjectController.addCluster
DELETE        /project/removeCluster/:clusterId                   controllers.conf.ProjectController.removeCluster(clusterId: Int)
# Project member
GET           /project/:projectId/members                         controllers.conf.ProjectController.members(projectId: Int)
GET           /project/:projectId/member/:jobNo                   controllers.conf.ProjectController.member(projectId: Int, jobNo: String)
POST          /project/:projectId/member                          controllers.conf.ProjectController.saveMember(projectId: Int, jobNo: String)
PUT           /project/member/:memberId                           controllers.conf.ProjectController.updateMember(memberId: Int, op: String)

# Template
GET           /tempalte/all                                       controllers.conf.TemplateController.all
GET           /tempalte/itemAttrs                                 controllers.conf.TemplateController.itemAttrs(templateId: Int, scriptVersion: String)
GET           /tempalte/itemVars                                  controllers.conf.TemplateController.itemVars(templateId: Int, scriptVersion: String)
GET           /tempalte/:templateId/items                         controllers.conf.TemplateController.items(templateId: Int)
GET           /tempalte/:id                                       controllers.conf.TemplateController.show(id: Int)
DELETE        /tempalte/:id                                       controllers.conf.TemplateController.delete(id: Int)
POST          /template                                           controllers.conf.TemplateController.save
PUT           /template/:id                                       controllers.conf.TemplateController.update(id: Int)

# Project Version
GET           /project/:projectId/nexusVersion                    controllers.conf.VersionController.nexusVersions(projectId: Int)
GET           /project/:projectId/version                         controllers.conf.VersionController.index(projectId: Int, page: Int ?=0, pageSize: Int ?=10)
GET           /project/:projectId/versoin/total                   controllers.conf.VersionController.count(projectId: Int)
GET           /project/version/all                                controllers.conf.VersionController.all(pid: Int, top: Int ?=30)
GET           /project/version/:id                                controllers.conf.VersionController.show(id: Int)
DELETE        /project/version/:id                                controllers.conf.VersionController.delete(id: Int)
POST          /porject/version                                    controllers.conf.VersionController.save
PUT           /project/version/:id                                controllers.conf.VersionController.update(id: Int)

# Project Dependency
GET           /project/dependency/:id                             controllers.conf.DependencyController.show(id: Int)
DELETE        /project/removeDependency/:parentId/:childId        controllers.conf.DependencyController.removeDependency(parentId: Int, childId: Int)
POST          /project/addDependency                              controllers.conf.DependencyController.addDependency
POST          /project/updateTemplateProject                      controllers.conf.DependencyController.updateTemplateProject

# Conf
GET           /conf/all                                           controllers.conf.ConfController.all(eid: Int, vid: Int)
GET           /conf/completer                                     controllers.conf.ConfController.completer(envId: Int, projectId: Int, versionId: Int)
GET           /conf/:id                                           controllers.conf.ConfController.show(id: Int)
DELETE        /conf/:id                                           controllers.conf.ConfController.delete(id: Int)
POST          /conf                                               controllers.conf.ConfController.save
POST          /conf/upload                                        controllers.conf.ConfController.upload
POST          /conf/copy                                          controllers.conf.ConfController.copy
PUT           /conf/:id                                           controllers.conf.ConfController.update(id: Int)

# System
PUT           /system/refresh                                     controllers.conf.SystemController.refresh

# Conf Log
GET           /conf/:confId/logs                                  controllers.conf.ConfController.logs(confId: Int, page: Int ?=0, pageSize: Int ?=10)
GET           /conf/:confId/logs/total                            controllers.conf.ConfController.logsCount(confId: Int)
GET           /conf/log/:id                                       controllers.conf.ConfController.log(id: Int)

# Relation
GET           /relation                                           controllers.conf.RelationController.index(ip: Option[String], envId: Option[Int], projectId: Option[Int], sort: Option[String], direction: Option[String], page: Int ?=0, pageSize: Int ?=10)
GET           /relation/total                                     controllers.conf.RelationController.count(ip: Option[String], envId: Option[Int], projectId: Option[Int])
GET           /relation/ips                                       controllers.conf.RelationController.ips(envId: Int)
GET           /relation/hosts                                      controllers.conf.RelationController.hosts(envId: Int, areaId: Int)
GET           /relation/:id                                       controllers.conf.RelationController.show(id: Int)
POST          /relation                                           controllers.conf.RelationController.bind
PUT           /relation/:id                                       controllers.conf.RelationController.update(id: Int)
DELETE        /relation/:id                                       controllers.conf.RelationController.unbind(id: Int)

# Task
POST          /task/lastStatus                                    controllers.task.TaskController.findLastTaskStatus
GET           /task/lastStatusSpecify                             controllers.task.TaskController.findLastStatus(envId: Int, projectId: Int, clusters: String)
GET           /task/joinProcess/:taskId                           controllers.task.TaskController.joinProcess(taskId: Int)
POST          /task/newTaskQueue                                  controllers.task.TaskController.createNewTaskQueue
POST          /task/removeTaskQueue                               controllers.task.TaskController.removeTaskQueue(qid: Int)
POST          /task/version                                       controllers.task.TaskController.getVersions(projectId: Int, envId: Int)
GET           /task/templates                                     controllers.task.TaskController.getTemplates(scriptVersion: String)
GET           /task/terminate                                     controllers.task.TaskController.forceTerminate(envId: Int, projectId: Int, clusterName: Option[String])
GET           /task/clusters                                      controllers.task.TaskController.findClusterByEnv_Project(envId: Int, projectId: Int)
GET           /task/history                                       controllers.task.TaskController.findHisTasks(envId: Int, projectId: Int)
# Task Log
GET           /task/log/:taskId                                   controllers.task.TaskController.taskLog(taskId: Int)
GET           /task/logHeader                                     controllers.task.TaskController.taskLogFirst(taskId: Int, byteSize: Int)

# Logs(user action)
POST          /logs                                               controllers.logs.LogsController.search(page: Int ?=0, pageSize: Int ?=10)
POST          /logs/total                                         controllers.logs.LogsController.count

# Open API
POST          /v1/project/version                                 controllers.conf.ProjectController.addVersion


GET           /javascriptRoutes                                   controllers.Application.javascriptRoutes

GET           /pkgs/*pkg                                          controllers.Application.pkgs(pkg: String)

# Map static resources from the /public folder to the / URL path, webjar
GET           /*file                                              controllers.Assets.at(path="/public", file)
